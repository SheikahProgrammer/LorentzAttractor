/* autogenerated by Processing revision 1292 on 2023-03-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class lorentzattractor extends PApplet {


PeasyCam cam;

float x = 0.01f;
float y = 0.01f;
float z = 0;

//test
float a = 11;
float b = 28;
float c = 8.0f/3.0f;

ArrayList<PVector> points = new ArrayList<PVector>(); 
int maxPoints = 3000; // maximum number of points to keep
float pointLifetime = 30.0f; // lifetime of a point in seconds
float lastPointTime = 0.0f; // time when the last point was added

public void setup(){
  /* size commented out by preprocessor */;
  colorMode(HSB);
  cam = new PeasyCam(this,500);
}

public void draw(){
  background(0);
  float dt = 0.01f;
  float dx = a*(y - x)*dt;
  float dy = (x*(b - z)-y)*dt;
  float dz = (x*y - c*z)*dt;
  x += dx;
  y += dy;
  z += dz;
  
  // add a new point
  points.add(new PVector(x, y, z));
  
  // remove old points
  if (points.size() > maxPoints || (millis() - lastPointTime) / 1000.0f > pointLifetime) {
    points.remove(0);
  }
  
  // update last point time
  lastPointTime = millis();
  
  // set up auto-rotation
  float autoRotateSpeed = 0.01f;
  rotateY(frameCount * autoRotateSpeed);
  
  translate(0, 0, -300);
  scale(5);
  stroke(255);
  noFill();
  
  float hu = 0;
  beginShape();
  for (PVector v : points) {
    stroke(hu % 255, 255, 255);
    vertex(v.x, v.y, v.z);
    hu++;
  }
  endShape();
}


  public void settings() { size(800, 600, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "lorentzattractor" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
